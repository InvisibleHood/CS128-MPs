// clang-format off
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//  Written By : Student Name                    Environment : ubuntu:bionic               //
//  Date ......: 2021/02/10                      Compiler ...: clang-10                    //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// clang-format on
/////////////////////////////////////////////////////////////////////////////////////////////
//                             Framework Set-up //
/////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CATCH_CONFIG_MAIN
#  define CATCH_CONFIG_MAIN
#endif
#include <catch/catch.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////
//                                 Includes //
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>

#include "circular-linked-list.hpp"
#include "node.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                             Helpers/Constants //
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
//                                Test Cases //
/////////////////////////////////////////////////////////////////////////////////////////////

TEST_CASE("AS adding 1234", "cl1") { 
    CircularLinkedList<int> cl;
    const int kTest1 = 1;
    const int kTest2 = 2;
    const int kTest3 = 3;
    const int kTest4 = 4;
    const int kTest5 = 5;
    const int kTest6 = 6;
    cl.InsertInOrder(kTest1);
    cl.InsertInOrder(kTest2);
    cl.InsertInOrder(kTest3);
    cl.InsertInOrder(kTest4);
    std::ostringstream oss;
    std::ostringstream oss1;
    oss << cl;
    oss1 << 1 << '\t' << 2 << '\t' << 3 << '\t' << 4 << '\t';;
    REQUIRE(oss.str() == oss1.str()); 
}

TEST_CASE("DS adding 20", "cl1") { 
    CircularLinkedList<int> cl;
    const int kTest1 = 1;
    const int kTest2 = 2;
    const int kTest3 = 3;
    const int kTest4 = 4;
    const int kTest5 = 5;
    const int kTest6 = 6;
    cl.InsertInOrder(0);
    cl.InsertInOrder(kTest2);
    cl.InsertInOrder(kTest3);
    cl.InsertInOrder(kTest4);
    std::ostringstream oss;
    std::ostringstream oss1;
    oss << cl;
    oss1 << 1 << '\t' << 2 << '\t' << 3 << '\t' << 4 << '\t';;
    REQUIRE(oss.str() == oss1.str()); 
}

/////////////////////////////////////////////////////////////////////////////////////////////